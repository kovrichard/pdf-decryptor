name: Tests

on:
  push:
    branches: [ main ]

env:
  FLASK_ENV: production
  UPLOAD_FOLDER: ${{ github.workspace }}/tests/uploads/

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python 3.10.4
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.4

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.10
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.poetry/venv
      
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Update and install dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install curl gcc musl-dev qpdf yarn
          poetry install
          yarn install
          yarn tailwindcss -i ./pdf_decryptor/server/static/style.css -o ./pdf_decryptor/server/static/main.css

      - name: Run linter
        run: |
          poetry run autoflake --check --remove-all-unused-imports --ignore-init-module-imports --recursive pdf_decryptor tests
          poetry run isort --check-only pdf_decryptor tests
          poetry run black --check pdf_decryptor tests

      - name: Run tests
        run: poetry run nose2 -v

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      
      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Trigger Google Cloud Build
        run: |
          export CLOUDSDK_CORE_DISABLE_PROMPTS=1
          gcloud beta builds triggers run ${{ secrets.STAGE_TRIGGER_ID }} --tag=${{ github.event.release.tag_name }}
      
      - name: Trigger Google Cloud Run deployment
        run: |
          gcloud run deploy pdf-decryptor --image gcr.io/pdfdecryptor/pdfdecryptor --platform managed --region us-central1
      
      - name: Delete unused containers
        run: |
          gcloud container images list-tags gcr.io/pdfdecryptor/pdfdecryptor --filter="NOT tags:*" --format="get(digest)" > unused_containers.txt
          chmod a+x gcloud_container_cleanup.sh
          ./gcloud_container_cleanup.sh unused_containers.txt